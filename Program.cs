using Spectre.Console;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using AirlineTicketSystem.Data;
using AirlineTicketSystem.Services;
using AirlineTicketSystem.Models;
using System.Globalization;

namespace AirlineTicketSystem
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö
            var culture = new CultureInfo("ru-RU");
            CultureInfo.CurrentCulture = culture;
            CultureInfo.CurrentUICulture = culture;
            Thread.CurrentThread.CurrentCulture = culture;
            Thread.CurrentThread.CurrentUICulture = culture;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            var host = Host.CreateDefaultBuilder(args)
                .ConfigureLogging(logging =>
                {
                    logging.ClearProviders(); // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    logging.SetMinimumLevel(LogLevel.Warning); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
                })
                .ConfigureServices((context, services) =>
                {
                    services.AddDbContext<AirlineDbContext>(options =>
                        options.UseSqlite("Data Source=airline.db")
                               .EnableSensitiveDataLogging(false)
                               .LogTo(Console.WriteLine, LogLevel.Warning)); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    
                    services.AddScoped<IAirlineService, AirlineService>();
                    services.AddScoped<IFlightService, FlightService>();
                    services.AddScoped<IPassengerService, PassengerService>();
                    services.AddScoped<IBookingService, BookingService>();
                })
                .Build();

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            using (var scope = host.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AirlineDbContext>();
                await context.Database.EnsureCreatedAsync();
                await SeedDataAsync(context);
            }

            // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            var app = new AirlineTicketApp(host.Services);
            await app.RunAsync();
        }

        private static async Task SeedDataAsync(AirlineDbContext context)
        {
            if (await context.Airlines.AnyAsync())
                return;

            var airlines = new List<Airline>
            {
                new() { Name = "–ê—ç—Ä–æ—Ñ–ª–æ—Ç", Code = "SU", Description = "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è" },
                new() { Name = "S7 Airlines", Code = "S7", Description = "–°–∏–±–∏—Ä—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏" },
                new() { Name = "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏", Code = "U6", Description = "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏" },
                new() { Name = "–ü–æ–±–µ–¥–∞", Code = "DP", Description = "–ë—é–¥–∂–µ—Ç–Ω–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è" }
            };

            context.Airlines.AddRange(airlines);
            await context.SaveChangesAsync();

            var flights = new List<Flight>
            {
                new()
                {
                    FlightNumber = "SU123",
                    DepartureCity = "–ú–æ—Å–∫–≤–∞",
                    ArrivalCity = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    DepartureTime = DateTime.Now.AddDays(1).AddHours(10),
                    ArrivalTime = DateTime.Now.AddDays(1).AddHours(12),
                    TotalSeats = 150,
                    AvailableSeats = 150,
                    BasePrice = 5000,
                    AirlineId = 1
                },
                new()
                {
                    FlightNumber = "S7456",
                    DepartureCity = "–ú–æ—Å–∫–≤–∞",
                    ArrivalCity = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                    DepartureTime = DateTime.Now.AddDays(2).AddHours(14),
                    ArrivalTime = DateTime.Now.AddDays(2).AddHours(18),
                    TotalSeats = 120,
                    AvailableSeats = 120,
                    BasePrice = 8000,
                    AirlineId = 2
                },
                new()
                {
                    FlightNumber = "U6789",
                    DepartureCity = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    ArrivalCity = "–°–æ—á–∏",
                    DepartureTime = DateTime.Now.AddDays(3).AddHours(8),
                    ArrivalTime = DateTime.Now.AddDays(3).AddHours(12),
                    TotalSeats = 180,
                    AvailableSeats = 180,
                    BasePrice = 12000,
                    AirlineId = 3
                }
            };

            context.Flights.AddRange(flights);
            await context.SaveChangesAsync();
        }
    }

    public class AirlineTicketApp
    {
        private readonly IServiceProvider _serviceProvider;

        public AirlineTicketApp(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public async Task RunAsync()
        {
            AnsiConsole.Write(new FigletText("–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã").Color(Color.Blue));
            AnsiConsole.Write(new Markup("[bold green]–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤[/]").Centered());
            AnsiConsole.WriteLine();

            while (true)
            {
                var choice = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[bold blue]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:[/]")
                        .AddChoices(new[]
                        {
                            "üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤",
                            "‚úàÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤",
                            "üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤",
                            "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏",
                            "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                            "‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            "üö™ –í—ã—Ö–æ–¥"
                        }));

                try
                {
                    switch (choice)
                    {
                        case "üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤":
                            await SearchFlightsAsync();
                            break;
                        case "‚úàÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤":
                            await ShowAllFlightsAsync();
                            break;
                        case "üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤":
                            await BookTicketsAsync();
                            break;
                        case "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏":
                            await ManagePassengersAsync();
                            break;
                        case "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
                            await ShowBookingsAsync();
                            break;
                        case "‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
                            await CancelBookingAsync();
                            break;
                        case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                            await ShowStatisticsAsync();
                            break;
                        case "üö™ –í—ã—Ö–æ–¥":
                            AnsiConsole.Write(new Markup("[bold red]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/]"));
                            return;
                    }
                }
                catch (Exception ex)
                {
                    AnsiConsole.WriteException(ex);
                }

                AnsiConsole.WriteLine();
                AnsiConsole.Write(new Markup("[dim]–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/]"));
                Console.ReadKey();
                AnsiConsole.Clear();
            }
        }

        private async Task SearchFlightsAsync()
        {
            while (true)
            {
                AnsiConsole.Write(new Markup("[bold blue]üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤[/]"));
                AnsiConsole.WriteLine();

                var departureCity = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞):[/]")
                        .AllowEmpty());

                if (string.IsNullOrWhiteSpace(departureCity) || departureCity.ToLower() == "–Ω–∞–∑–∞–¥")
                {
                    return;
                }

                var arrivalCity = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞):[/]")
                        .AllowEmpty());

                if (string.IsNullOrWhiteSpace(arrivalCity) || arrivalCity.ToLower() == "–Ω–∞–∑–∞–¥")
                {
                    return;
                }

                var departureDateStr = AnsiConsole.Ask<string>("[green]–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (dd.MM.yyyy) –∏–ª–∏ Enter –¥–ª—è –ª—é–±–æ–π:[/]", "");

                DateTime? departureDate = null;
                if (!string.IsNullOrEmpty(departureDateStr))
                {
                    if (DateTime.TryParseExact(departureDateStr, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out var parsedDate))
                    {
                        departureDate = parsedDate;
                    }
                }

                using var scope = _serviceProvider.CreateScope();
                var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();

                var flights = await flightService.SearchFlightsAsync(departureCity, arrivalCity, departureDate);

                if (!flights.Any())
                {
                    AnsiConsole.Write(new Markup("[red]–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                }
                else
                {
                    var table = new Table();
                    table.AddColumn("‚Ññ");
                    table.AddColumn("–†–µ–π—Å");
                    table.AddColumn("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
                    table.AddColumn("–û—Ç–∫—É–¥–∞");
                    table.AddColumn("–ö—É–¥–∞");
                    table.AddColumn("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
                    table.AddColumn("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è");
                    table.AddColumn("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
                    table.AddColumn("–¶–µ–Ω–∞");

                    for (int i = 0; i < flights.Count; i++)
                    {
                        var flight = flights[i];
                        table.AddRow(
                            (i + 1).ToString(),
                            flight.FlightNumber,
                            flight.Airline.Name,
                            flight.DepartureCity,
                            flight.ArrivalCity,
                            flight.DepartureTime.ToString("dd.MM.yyyy HH:mm"),
                            flight.ArrivalTime.ToString("dd.MM.yyyy HH:mm"),
                            flight.AvailableSeats.ToString(),
                            $"{flight.BasePrice:C}"
                        );
                    }

                    AnsiConsole.Write(table);
                }

                AnsiConsole.WriteLine();
                var continueSearch = AnsiConsole.Confirm("[yellow]–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?[/]", false);
                if (!continueSearch)
                {
                    return;
                }
                AnsiConsole.Clear();
            }
        }

        private async Task ShowAllFlightsAsync()
        {
            while (true)
            {
                AnsiConsole.Write(new Markup("[bold blue]‚úàÔ∏è –í—Å–µ —Ä–µ–π—Å—ã[/]"));
                AnsiConsole.WriteLine();

                using var scope = _serviceProvider.CreateScope();
                var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();

                var flights = await flightService.GetAllFlightsAsync();

                if (!flights.Any())
                {
                    AnsiConsole.Write(new Markup("[red]–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                    AnsiConsole.WriteLine();
                    AnsiConsole.Write(new Markup("[dim]–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...[/]"));
                    Console.ReadKey();
                    return;
                }

                var table = new Table();
                table.Border = TableBorder.Rounded;
                table.AddColumn("‚Ññ");
                table.AddColumn("–†–µ–π—Å");
                table.AddColumn("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
                table.AddColumn("–û—Ç–∫—É–¥–∞");
                table.AddColumn("–ö—É–¥–∞");
                table.AddColumn("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
                table.AddColumn("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è");
                table.AddColumn("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
                table.AddColumn("–¶–µ–Ω–∞");

                for (int i = 0; i < flights.Count; i++)
                {
                    var flight = flights[i];
                    var seatsColor = flight.AvailableSeats > 50 ? "green" : 
                                    flight.AvailableSeats > 10 ? "yellow" : "red";
                    
                    table.AddRow(
                        (i + 1).ToString(),
                        flight.FlightNumber,
                        flight.Airline.Name,
                        flight.DepartureCity,
                        flight.ArrivalCity,
                        flight.DepartureTime.ToString("dd.MM.yyyy HH:mm"),
                        flight.ArrivalTime.ToString("dd.MM.yyyy HH:mm"),
                        $"[{seatsColor}]{flight.AvailableSeats}[/]",
                        $"{flight.BasePrice:C}"
                    );
                }

                AnsiConsole.Write(table);
                AnsiConsole.WriteLine();

                var action = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[green]–ß—Ç–æ –¥–∞–ª—å—à–µ?[/]")
                        .AddChoices(new[]
                        {
                            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                            "üé´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç",
                            "üîô –ù–∞–∑–∞–¥"
                        }));

                if (action == "üîô –ù–∞–∑–∞–¥")
                {
                    return;
                }
                else if (action == "üé´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç")
                {
                    AnsiConsole.Clear();
                    await BookTicketsAsync();
                    return;
                }
                
                AnsiConsole.Clear();
            }
        }

        private async Task BookTicketsAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();
            var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();
            var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

            // –í—ã–±–æ—Ä —Ä–µ–π—Å–∞
            var flights = await flightService.GetAllFlightsAsync();
            if (!flights.Any())
            {
                AnsiConsole.Write(new Markup("[red]–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.[/]"));
                return;
            }

            var flightChoices = flights.Select(f => $"{f.FlightNumber} - {f.DepartureCity} ‚Üí {f.ArrivalCity} ({f.DepartureTime:dd.MM.yyyy HH:mm})").ToList();
            flightChoices.Add("üîô –ù–∞–∑–∞–¥");
            
            var selectedFlightStr = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å:[/]")
                    .AddChoices(flightChoices));

            if (selectedFlightStr == "üîô –ù–∞–∑–∞–¥")
            {
                return;
            }

            var selectedFlight = flights[flightChoices.IndexOf(selectedFlightStr)];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç
            if (selectedFlight.AvailableSeats <= 0)
            {
                AnsiConsole.Write(new Markup("[red]–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–π—Å–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.[/]"));
                return;
            }

            // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            AnsiConsole.WriteLine();
            AnsiConsole.Write(new Markup("[bold]–î–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:[/]"));
            AnsiConsole.WriteLine();
            
            var firstName = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–ò–º—è (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):[/]")
                    .AllowEmpty());
            
            if (string.IsNullOrWhiteSpace(firstName) || firstName.ToLower() == "–Ω–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var lastName = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–§–∞–º–∏–ª–∏—è (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):[/]")
                    .AllowEmpty());
            
            if (string.IsNullOrWhiteSpace(lastName) || lastName.ToLower() == "–Ω–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var passportNumber = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):[/]")
                    .AllowEmpty());
            
            if (string.IsNullOrWhiteSpace(passportNumber) || passportNumber.ToLower() == "–Ω–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var email = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]Email (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):[/]")
                    .AllowEmpty());
            
            if (string.IsNullOrWhiteSpace(email) || email.ToLower() == "–Ω–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var phoneNumber = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–¢–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):[/]")
                    .AllowEmpty());
            
            if (string.IsNullOrWhiteSpace(phoneNumber) || phoneNumber.ToLower() == "–Ω–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var dateOfBirthStr = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (dd.MM.yyyy) –∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã:[/]")
                    .AllowEmpty());

            if (string.IsNullOrWhiteSpace(dateOfBirthStr) || dateOfBirthStr.ToLower() == "–Ω–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            if (!DateTime.TryParseExact(dateOfBirthStr, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out var dateOfBirth))
            {
                AnsiConsole.Write(new Markup("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            var passenger = await passengerService.GetPassengerByPassportAsync(passportNumber);
            if (passenger == null)
            {
                passenger = new Passenger
                {
                    FirstName = firstName,
                    LastName = lastName,
                    PassportNumber = passportNumber,
                    Email = email,
                    PhoneNumber = phoneNumber,
                    DateOfBirth = dateOfBirth
                };
                passenger = await passengerService.CreatePassengerAsync(passenger);
                AnsiConsole.Write(new Markup("[green]‚úÖ –ù–æ–≤—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.[/]"));
                AnsiConsole.WriteLine();
            }
            else
            {
                AnsiConsole.Write(new Markup("[green]‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.[/]"));
                AnsiConsole.WriteLine();
            }

            // –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
            var classChoices = new List<string>
            {
                "Economy",
                "Business",
                "First",
                "üîô –ù–∞–∑–∞–¥"
            };

            var selectedClass = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:[/]")
                    .AddChoices(classChoices));

            if (selectedClass == "üîô –ù–∞–∑–∞–¥")
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var ticketClass = Enum.Parse<TicketClass>(selectedClass);

            // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
            var priceMultiplier = ticketClass switch
            {
                TicketClass.Economy => 1.0m,
                TicketClass.Business => 2.0m,
                TicketClass.First => 3.0m,
                _ => 1.0m
            };

            var ticketPrice = selectedFlight.BasePrice * priceMultiplier;

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            AnsiConsole.WriteLine();
            var confirm = AnsiConsole.Confirm($"[green]–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ {ticketPrice:C}?[/]");
            if (!confirm)
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            var ticket = new Ticket
            {
                FlightId = selectedFlight.Id,
                PassengerId = passenger.Id,
                Price = ticketPrice,
                Class = ticketClass,
                Status = TicketStatus.Active,
                BookingDate = DateTime.Now
            };

            var booking = await bookingService.CreateBookingAsync(new List<Ticket> { ticket });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
            await flightService.UpdateAvailableSeatsAsync(selectedFlight.Id, 1);

            AnsiConsole.WriteLine();
            AnsiConsole.Write(new Markup($"[bold green]‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ![/]"));
            AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.BookingNumber}[/]"));
            AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {ticket.TicketNumber}[/]"));
        }

        private async Task ManagePassengersAsync()
        {
            while (true)
            {
                AnsiConsole.Write(new Markup("[bold blue]üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏[/]"));
                AnsiConsole.WriteLine();

                using var scope = _serviceProvider.CreateScope();
                var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();

                var action = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[green]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:[/]")
                        .AddChoices(new[]
                        {
                            "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
                            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞",
                            "üîô –ù–∞–∑–∞–¥"
                        }));

                if (action == "üîô –ù–∞–∑–∞–¥")
                {
                    return;
                }

                if (action == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
                {
                    await ShowAllPassengersAsync();
                }
                else if (action == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞")
                {
                    await EditPassengerAsync();
                }

                AnsiConsole.WriteLine();
                AnsiConsole.Write(new Markup("[dim]–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/]"));
                Console.ReadKey();
                AnsiConsole.Clear();
            }
        }

        private async Task ShowAllPassengersAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üìã –í—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();

            var passengers = await passengerService.GetAllPassengersAsync();

            if (!passengers.Any())
            {
                AnsiConsole.Write(new Markup("[red]–ü–∞—Å—Å–∞–∂–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                return;
            }

            var table = new Table();
            table.AddColumn("‚Ññ");
            table.AddColumn("–ò–º—è");
            table.AddColumn("–§–∞–º–∏–ª–∏—è");
            table.AddColumn("–ü–∞—Å–ø–æ—Ä—Ç");
            table.AddColumn("Email");
            table.AddColumn("–¢–µ–ª–µ—Ñ–æ–Ω");
            table.AddColumn("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è");

            for (int i = 0; i < passengers.Count; i++)
            {
                var passenger = passengers[i];
                table.AddRow(
                    (i + 1).ToString(),
                    passenger.FirstName,
                    passenger.LastName,
                    passenger.PassportNumber,
                    passenger.Email ?? "",
                    passenger.PhoneNumber ?? "",
                    passenger.DateOfBirth.ToString("dd.MM.yyyy")
                );
            }

            AnsiConsole.Write(table);
        }

        private async Task EditPassengerAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();

            var passengers = await passengerService.GetAllPassengersAsync();

            if (!passengers.Any())
            {
                AnsiConsole.Write(new Markup("[red]–ü–∞—Å—Å–∞–∂–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–∞–∑–∞–¥" –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞
            var passengerChoices = passengers.Select(p => 
                $"{p.FirstName} {p.LastName} - {p.PassportNumber}").ToList();
            passengerChoices.Add("üîô –ù–∞–∑–∞–¥");

            var selectedPassengerStr = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:[/]")
                    .AddChoices(passengerChoices));

            if (selectedPassengerStr == "üîô –ù–∞–∑–∞–¥")
            {
                return;
            }

            var selectedPassenger = passengers[passengerChoices.IndexOf(selectedPassengerStr)];

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            var panel = new Panel(
                $"[bold]–ò–º—è:[/] {selectedPassenger.FirstName}\n" +
                $"[bold]–§–∞–º–∏–ª–∏—è:[/] {selectedPassenger.LastName}\n" +
                $"[bold]–ü–∞—Å–ø–æ—Ä—Ç:[/] {selectedPassenger.PassportNumber}\n" +
                $"[bold]Email:[/] {selectedPassenger.Email ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"} [dim](–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è)[/]\n" +
                $"[bold]–¢–µ–ª–µ—Ñ–æ–Ω:[/] {selectedPassenger.PhoneNumber ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}\n" +
                $"[bold]–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:[/] {selectedPassenger.DateOfBirth:dd.MM.yyyy}")
            {
                Header = new PanelHeader("[bold blue]–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞[/]")
            };

            AnsiConsole.Write(panel);
            AnsiConsole.WriteLine();

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            AnsiConsole.Write(new Markup("[bold]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):[/]"));
            AnsiConsole.WriteLine();

            var firstName = AnsiConsole.Ask<string>("[green]–ò–º—è:[/]", selectedPassenger.FirstName);
            var lastName = AnsiConsole.Ask<string>("[green]–§–∞–º–∏–ª–∏—è:[/]", selectedPassenger.LastName);
            var passportNumber = AnsiConsole.Ask<string>("[green]–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:[/]", selectedPassenger.PassportNumber);
            var phoneNumber = AnsiConsole.Ask<string>("[green]–¢–µ–ª–µ—Ñ–æ–Ω:[/]", selectedPassenger.PhoneNumber ?? "");
            
            var dateOfBirthStr = AnsiConsole.Ask<string>(
                "[green]–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (dd.MM.yyyy):[/]", 
                selectedPassenger.DateOfBirth.ToString("dd.MM.yyyy"));

            DateTime dateOfBirth = selectedPassenger.DateOfBirth;
            if (!string.IsNullOrEmpty(dateOfBirthStr) && dateOfBirthStr != selectedPassenger.DateOfBirth.ToString("dd.MM.yyyy"))
            {
                if (!DateTime.TryParseExact(dateOfBirthStr, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out dateOfBirth))
                {
                    AnsiConsole.Write(new Markup("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.[/]"));
                    return;
                }
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            var confirm = AnsiConsole.Confirm("[yellow]–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?[/]");
            if (!confirm)
            {
                AnsiConsole.Write(new Markup("[yellow]–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.[/]"));
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            selectedPassenger.FirstName = firstName;
            selectedPassenger.LastName = lastName;
            selectedPassenger.PassportNumber = passportNumber;
            selectedPassenger.PhoneNumber = string.IsNullOrWhiteSpace(phoneNumber) ? null : phoneNumber;
            selectedPassenger.DateOfBirth = dateOfBirth;

            var success = await passengerService.UpdatePassengerAsync(selectedPassenger);

            if (success)
            {
                AnsiConsole.Write(new Markup("[bold green]‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã![/]"));
            }
            else
            {
                AnsiConsole.Write(new Markup("[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞.[/]"));
            }
        }

        private async Task ShowBookingsAsync()
        {
            while (true)
            {
                AnsiConsole.Write(new Markup("[bold blue]üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è[/]"));
                AnsiConsole.WriteLine();

                using var scope = _serviceProvider.CreateScope();
                var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

                var bookings = await bookingService.GetAllBookingsAsync();

                if (!bookings.Any())
                {
                    AnsiConsole.Write(new Markup("[red]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                    AnsiConsole.WriteLine();
                    AnsiConsole.Write(new Markup("[dim]–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...[/]"));
                    Console.ReadKey();
                    return;
                }

                foreach (var booking in bookings)
                {
                    var statusColor = booking.Status == BookingStatus.Confirmed ? "green" : 
                                     booking.Status == BookingStatus.Cancelled ? "red" : "blue";
                    
                    var panel = new Panel($"[bold]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {booking.BookingNumber}\n" +
                                        $"[bold]–°—Ç–∞—Ç—É—Å:[/] {GetStatusText(booking.Status)}\n" +
                                        $"[bold]–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {booking.BookingDate:dd.MM.yyyy HH:mm}\n" +
                                        $"[bold]–û–±—â–∞—è —Å—É–º–º–∞:[/] {booking.TotalAmount:C}")
                    {
                        Header = new PanelHeader($"[bold {statusColor}]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.Id}[/]"),
                        Border = BoxBorder.Rounded
                    };

                    AnsiConsole.Write(panel);

                    var table = new Table();
                    table.Border = TableBorder.Rounded;
                    table.AddColumn("–ë–∏–ª–µ—Ç");
                    table.AddColumn("–ü–∞—Å—Å–∞–∂–∏—Ä");
                    table.AddColumn("–†–µ–π—Å");
                    table.AddColumn("–ö–ª–∞—Å—Å");
                    table.AddColumn("–¶–µ–Ω–∞");

                    foreach (var ticket in booking.Tickets)
                    {
                        table.AddRow(
                            ticket.TicketNumber,
                            $"{ticket.Passenger.FirstName} {ticket.Passenger.LastName}",
                            $"{ticket.Flight.FlightNumber} ({ticket.Flight.DepartureCity} ‚Üí {ticket.Flight.ArrivalCity})",
                            ticket.Class.ToString(),
                            $"{ticket.Price:C}"
                        );
                    }

                    AnsiConsole.Write(table);
                    AnsiConsole.WriteLine();
                }

                var action = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[green]–ß—Ç–æ –¥–∞–ª—å—à–µ?[/]")
                        .AddChoices(new[]
                        {
                            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            "üîô –ù–∞–∑–∞–¥"
                        }));

                if (action == "üîô –ù–∞–∑–∞–¥")
                {
                    return;
                }
                else if (action == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                {
                    AnsiConsole.Clear();
                    await CancelBookingAsync();
                    return;
                }
                
                AnsiConsole.Clear();
            }
        }

        private async Task CancelBookingAsync()
        {
            while (true)
            {
                AnsiConsole.Write(new Markup("[bold blue]‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è[/]"));
                AnsiConsole.WriteLine();

                using var scope = _serviceProvider.CreateScope();
                var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

                var bookingNumber = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞):[/]")
                        .AllowEmpty());

                if (string.IsNullOrWhiteSpace(bookingNumber) || bookingNumber.ToLower() == "–Ω–∞–∑–∞–¥")
                {
                    return;
                }

                var booking = await bookingService.GetBookingByNumberAsync(bookingNumber);
                if (booking == null)
                {
                    AnsiConsole.Write(new Markup("[red]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.[/]"));
                    AnsiConsole.WriteLine();
                    var retry = AnsiConsole.Confirm("[yellow]–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?[/]");
                    if (!retry)
                    {
                        return;
                    }
                    AnsiConsole.Clear();
                    continue;
                }

                if (booking.Status == BookingStatus.Cancelled)
                {
                    AnsiConsole.Write(new Markup("[red]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                    AnsiConsole.WriteLine();
                    var retry = AnsiConsole.Confirm("[yellow]–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º?[/]");
                    if (!retry)
                    {
                        return;
                    }
                    AnsiConsole.Clear();
                    continue;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                var panel = new Panel(
                    $"[bold]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {booking.BookingNumber}\n" +
                    $"[bold]–°—Ç–∞—Ç—É—Å:[/] {GetStatusText(booking.Status)}\n" +
                    $"[bold]–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {booking.BookingDate:dd.MM.yyyy HH:mm}\n" +
                    $"[bold]–û–±—â–∞—è —Å—É–º–º–∞:[/] {booking.TotalAmount:C}\n" +
                    $"[bold]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:[/] {booking.Tickets.Count}")
                {
                    Header = new PanelHeader("[bold blue]–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è[/]")
                };

                AnsiConsole.Write(panel);
                AnsiConsole.WriteLine();

                var confirm = AnsiConsole.Confirm($"[red]–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?[/]");
                if (!confirm)
                {
                    AnsiConsole.Write(new Markup("[yellow]–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/]"));
                    return;
                }

                var success = await bookingService.CancelBookingAsync(booking.Id);
                if (success)
                {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ –Ω–∞ —Ä–µ–π—Å–∞—Ö
                    var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();
                    foreach (var ticket in booking.Tickets)
                    {
                        var flight = await flightService.GetFlightByIdAsync(ticket.FlightId);
                        if (flight != null)
                        {
                            flight.AvailableSeats++;
                            var context = scope.ServiceProvider.GetRequiredService<AirlineDbContext>();
                            await context.SaveChangesAsync();
                        }
                    }

                    AnsiConsole.Write(new Markup("[bold green]‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ![/]"));
                }
                else
                {
                    AnsiConsole.Write(new Markup("[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.[/]"));
                }

                AnsiConsole.WriteLine();
                var another = AnsiConsole.Confirm("[yellow]–û—Ç–º–µ–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?[/]", false);
                if (!another)
                {
                    return;
                }
                AnsiConsole.Clear();
            }
        }

        private async Task ShowStatisticsAsync()
        {
            while (true)
            {
                AnsiConsole.Write(new Markup("[bold blue]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã[/]"));
                AnsiConsole.WriteLine();

                using var scope = _serviceProvider.CreateScope();
                var context = scope.ServiceProvider.GetRequiredService<AirlineDbContext>();

                var totalFlights = await context.Flights.CountAsync();
                var totalPassengers = await context.Passengers.CountAsync();
                var totalBookings = await context.Bookings.CountAsync();
                var activeBookings = await context.Bookings.CountAsync(b => b.Status == BookingStatus.Confirmed);
                var cancelledBookings = await context.Bookings.CountAsync(b => b.Status == BookingStatus.Cancelled);
                var totalRevenue = await context.Bookings
                    .Where(b => b.Status != BookingStatus.Cancelled)
                    .SumAsync(b => b.TotalAmount);
                var totalSeats = await context.Flights.SumAsync(f => f.TotalSeats);
                var availableSeats = await context.Flights.SumAsync(f => f.AvailableSeats);
                var occupiedSeats = totalSeats - availableSeats;
                var occupancyRate = totalSeats > 0 ? (double)occupiedSeats / totalSeats * 100 : 0;

                var stats = new Table();
                stats.Border = TableBorder.Rounded;
                stats.AddColumn(new TableColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å").Centered());
                stats.AddColumn(new TableColumn("–ó–Ω–∞—á–µ–Ω–∏–µ").Centered());

                stats.AddRow("[bold]–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤[/]", $"[green]{totalFlights}[/]");
                stats.AddRow("[bold]–í—Å–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤[/]", $"[green]{totalPassengers}[/]");
                stats.AddRow("[bold]–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π[/]", $"[green]{totalBookings}[/]");
                stats.AddRow("  - –ê–∫—Ç–∏–≤–Ω—ã—Ö", $"[green]{activeBookings}[/]");
                stats.AddRow("  - –û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö", $"[red]{cancelledBookings}[/]");
                stats.AddRow("[bold]–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞[/]", $"[blue]{totalRevenue:C}[/]");
                stats.AddRow("[bold]–í—Å–µ–≥–æ –º–µ—Å—Ç[/]", $"[yellow]{totalSeats}[/]");
                stats.AddRow("  - –ó–∞–Ω—è—Ç–æ", $"[red]{occupiedSeats}[/]");
                stats.AddRow("  - –°–≤–æ–±–æ–¥–Ω–æ", $"[green]{availableSeats}[/]");
                stats.AddRow("[bold]–ó–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å[/]", $"[cyan]{occupancyRate:F2}%[/]");

                AnsiConsole.Write(stats);
                AnsiConsole.WriteLine();

                // –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                var topRoutes = await context.Tickets
                    .Include(t => t.Flight)
                    .Where(t => t.Status != TicketStatus.Cancelled)
                    .GroupBy(t => new { t.Flight.DepartureCity, t.Flight.ArrivalCity })
                    .Select(g => new 
                    { 
                        Route = $"{g.Key.DepartureCity} ‚Üí {g.Key.ArrivalCity}",
                        Count = g.Count(),
                        Revenue = g.Sum(t => t.Price)
                    })
                    .OrderByDescending(r => r.Count)
                    .Take(5)
                    .ToListAsync();

                if (topRoutes.Any())
                {
                    AnsiConsole.Write(new Markup("[bold blue]üî• –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:[/]"));
                    AnsiConsole.WriteLine();

                    var routesTable = new Table();
                    routesTable.Border = TableBorder.Rounded;
                    routesTable.AddColumn("–ú–µ—Å—Ç–æ");
                    routesTable.AddColumn("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
                    routesTable.AddColumn("–ë–∏–ª–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–Ω–æ");
                    routesTable.AddColumn("–í—ã—Ä—É—á–∫–∞");

                    for (int i = 0; i < topRoutes.Count; i++)
                    {
                        var medal = i == 0 ? "ü•á" : i == 1 ? "ü•à" : i == 2 ? "ü•â" : $"{i + 1}.";
                        routesTable.AddRow(
                            medal,
                            topRoutes[i].Route,
                            topRoutes[i].Count.ToString(),
                            $"{topRoutes[i].Revenue:C}"
                        );
                    }

                    AnsiConsole.Write(routesTable);
                    AnsiConsole.WriteLine();
                }

                var action = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[green]–ß—Ç–æ –¥–∞–ª—å—à–µ?[/]")
                        .AddChoices(new[]
                        {
                            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                            "üîô –ù–∞–∑–∞–¥"
                        }));

                if (action == "üîô –ù–∞–∑–∞–¥")
                {
                    return;
                }
                
                AnsiConsole.Clear();
            }
        }

        private string GetStatusText(BookingStatus status)
        {
            return status switch
            {
                BookingStatus.Confirmed => "[green]–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ[/]",
                BookingStatus.Cancelled => "[red]–û—Ç–º–µ–Ω–µ–Ω–æ[/]",
                BookingStatus.Completed => "[blue]–ó–∞–≤–µ—Ä—à–µ–Ω–æ[/]",
                _ => status.ToString()
            };
        }
    }
}
