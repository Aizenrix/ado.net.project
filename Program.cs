using Spectre.Console;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using AirlineTicketSystem.Data;
using AirlineTicketSystem.Services;
using AirlineTicketSystem.Models;

namespace AirlineTicketSystem
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            var host = Host.CreateDefaultBuilder(args)
                .ConfigureServices((context, services) =>
                {
                    services.AddDbContext<AirlineDbContext>(options =>
                        options.UseSqlite("Data Source=airline.db"));
                    
                    services.AddScoped<IAirlineService, AirlineService>();
                    services.AddScoped<IFlightService, FlightService>();
                    services.AddScoped<IPassengerService, PassengerService>();
                    services.AddScoped<IBookingService, BookingService>();
                })
                .Build();

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            using (var scope = host.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AirlineDbContext>();
                await context.Database.EnsureCreatedAsync();
                await SeedDataAsync(context);
            }

            // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            var app = new AirlineTicketApp(host.Services);
            await app.RunAsync();
        }

        private static async Task SeedDataAsync(AirlineDbContext context)
        {
            if (await context.Airlines.AnyAsync())
                return;

            var airlines = new List<Airline>
            {
                new() { Name = "–ê—ç—Ä–æ—Ñ–ª–æ—Ç", Code = "SU", Description = "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è" },
                new() { Name = "S7 Airlines", Code = "S7", Description = "–°–∏–±–∏—Ä—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏" },
                new() { Name = "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏", Code = "U6", Description = "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏" },
                new() { Name = "–ü–æ–±–µ–¥–∞", Code = "DP", Description = "–ë—é–¥–∂–µ—Ç–Ω–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è" }
            };

            context.Airlines.AddRange(airlines);
            await context.SaveChangesAsync();

            var flights = new List<Flight>
            {
                new()
                {
                    FlightNumber = "SU123",
                    DepartureCity = "–ú–æ—Å–∫–≤–∞",
                    ArrivalCity = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    DepartureTime = DateTime.Now.AddDays(1).AddHours(10),
                    ArrivalTime = DateTime.Now.AddDays(1).AddHours(12),
                    TotalSeats = 150,
                    AvailableSeats = 150,
                    BasePrice = 5000,
                    AirlineId = 1
                },
                new()
                {
                    FlightNumber = "S7456",
                    DepartureCity = "–ú–æ—Å–∫–≤–∞",
                    ArrivalCity = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                    DepartureTime = DateTime.Now.AddDays(2).AddHours(14),
                    ArrivalTime = DateTime.Now.AddDays(2).AddHours(18),
                    TotalSeats = 120,
                    AvailableSeats = 120,
                    BasePrice = 8000,
                    AirlineId = 2
                },
                new()
                {
                    FlightNumber = "U6789",
                    DepartureCity = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    ArrivalCity = "–°–æ—á–∏",
                    DepartureTime = DateTime.Now.AddDays(3).AddHours(8),
                    ArrivalTime = DateTime.Now.AddDays(3).AddHours(12),
                    TotalSeats = 180,
                    AvailableSeats = 180,
                    BasePrice = 12000,
                    AirlineId = 3
                }
            };

            context.Flights.AddRange(flights);
            await context.SaveChangesAsync();
        }
    }

    public class AirlineTicketApp
    {
        private readonly IServiceProvider _serviceProvider;

        public AirlineTicketApp(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public async Task RunAsync()
        {
            AnsiConsole.Write(new FigletText("–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã").Color(Color.Blue));
            AnsiConsole.Write(new Markup("[bold green]–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤[/]").Centered());
            AnsiConsole.WriteLine();

            while (true)
            {
                var choice = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[bold blue]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:[/]")
                        .AddChoices(new[]
                        {
                            "üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤",
                            "‚úàÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤",
                            "üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤",
                            "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏",
                            "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                            "‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            "üö™ –í—ã—Ö–æ–¥"
                        }));

                try
                {
                    switch (choice)
                    {
                        case "üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤":
                            await SearchFlightsAsync();
                            break;
                        case "‚úàÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤":
                            await ShowAllFlightsAsync();
                            break;
                        case "üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤":
                            await BookTicketsAsync();
                            break;
                        case "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏":
                            await ManagePassengersAsync();
                            break;
                        case "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
                            await ShowBookingsAsync();
                            break;
                        case "‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
                            await CancelBookingAsync();
                            break;
                        case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                            await ShowStatisticsAsync();
                            break;
                        case "üö™ –í—ã—Ö–æ–¥":
                            AnsiConsole.Write(new Markup("[bold red]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/]"));
                            return;
                    }
                }
                catch (Exception ex)
                {
                    AnsiConsole.WriteException(ex);
                }

                AnsiConsole.WriteLine();
                AnsiConsole.Write(new Markup("[dim]–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/]"));
                Console.ReadKey();
                AnsiConsole.Clear();
            }
        }

        private async Task SearchFlightsAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤[/]"));
            AnsiConsole.WriteLine();

            var departureCity = AnsiConsole.Ask<string>("[green]–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:[/]");
            var arrivalCity = AnsiConsole.Ask<string>("[green]–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:[/]");
            var departureDateStr = AnsiConsole.Ask<string>("[green]–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (dd.MM.yyyy) –∏–ª–∏ Enter –¥–ª—è –ª—é–±–æ–π:[/]");

            DateTime? departureDate = null;
            if (!string.IsNullOrEmpty(departureDateStr))
            {
                if (DateTime.TryParseExact(departureDateStr, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out var parsedDate))
                {
                    departureDate = parsedDate;
                }
            }

            using var scope = _serviceProvider.CreateScope();
            var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();

            var flights = await flightService.SearchFlightsAsync(departureCity, arrivalCity, departureDate);

            if (!flights.Any())
            {
                AnsiConsole.Write(new Markup("[red]–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                return;
            }

            var table = new Table();
            table.AddColumn("‚Ññ");
            table.AddColumn("–†–µ–π—Å");
            table.AddColumn("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
            table.AddColumn("–û—Ç–∫—É–¥–∞");
            table.AddColumn("–ö—É–¥–∞");
            table.AddColumn("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            table.AddColumn("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è");
            table.AddColumn("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
            table.AddColumn("–¶–µ–Ω–∞");

            for (int i = 0; i < flights.Count; i++)
            {
                var flight = flights[i];
                table.AddRow(
                    (i + 1).ToString(),
                    flight.FlightNumber,
                    flight.Airline.Name,
                    flight.DepartureCity,
                    flight.ArrivalCity,
                    flight.DepartureTime.ToString("dd.MM.yyyy HH:mm"),
                    flight.ArrivalTime.ToString("dd.MM.yyyy HH:mm"),
                    flight.AvailableSeats.ToString(),
                    $"{flight.BasePrice:C}"
                );
            }

            AnsiConsole.Write(table);
        }

        private async Task ShowAllFlightsAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]‚úàÔ∏è –í—Å–µ —Ä–µ–π—Å—ã[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();

            var flights = await flightService.GetAllFlightsAsync();

            var table = new Table();
            table.AddColumn("‚Ññ");
            table.AddColumn("–†–µ–π—Å");
            table.AddColumn("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
            table.AddColumn("–û—Ç–∫—É–¥–∞");
            table.AddColumn("–ö—É–¥–∞");
            table.AddColumn("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            table.AddColumn("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è");
            table.AddColumn("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
            table.AddColumn("–¶–µ–Ω–∞");

            for (int i = 0; i < flights.Count; i++)
            {
                var flight = flights[i];
                table.AddRow(
                    (i + 1).ToString(),
                    flight.FlightNumber,
                    flight.Airline.Name,
                    flight.DepartureCity,
                    flight.ArrivalCity,
                    flight.DepartureTime.ToString("dd.MM.yyyy HH:mm"),
                    flight.ArrivalTime.ToString("dd.MM.yyyy HH:mm"),
                    flight.AvailableSeats.ToString(),
                    $"{flight.BasePrice:C}"
                );
            }

            AnsiConsole.Write(table);
        }

        private async Task BookTicketsAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();
            var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();
            var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

            // –í—ã–±–æ—Ä —Ä–µ–π—Å–∞
            var flights = await flightService.GetAllFlightsAsync();
            var flightChoices = flights.Select(f => $"{f.FlightNumber} - {f.DepartureCity} ‚Üí {f.ArrivalCity} ({f.DepartureTime:dd.MM.yyyy HH:mm})").ToList();
            
            var selectedFlightStr = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å:[/]")
                    .AddChoices(flightChoices));

            var selectedFlight = flights[flightChoices.IndexOf(selectedFlightStr)];

            // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            AnsiConsole.Write(new Markup("[bold]–î–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:[/]"));
            var firstName = AnsiConsole.Ask<string>("[green]–ò–º—è:[/]");
            var lastName = AnsiConsole.Ask<string>("[green]–§–∞–º–∏–ª–∏—è:[/]");
            var passportNumber = AnsiConsole.Ask<string>("[green]–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:[/]");
            var email = AnsiConsole.Ask<string>("[green]Email:[/]");
            var phoneNumber = AnsiConsole.Ask<string>("[green]–¢–µ–ª–µ—Ñ–æ–Ω:[/]");
            var dateOfBirthStr = AnsiConsole.Ask<string>("[green]–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (dd.MM.yyyy):[/]");

            if (!DateTime.TryParseExact(dateOfBirthStr, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out var dateOfBirth))
            {
                AnsiConsole.Write(new Markup("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.[/]"));
                return;
            }

            // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            var passenger = await passengerService.GetPassengerByPassportAsync(passportNumber);
            if (passenger == null)
            {
                passenger = new Passenger
                {
                    FirstName = firstName,
                    LastName = lastName,
                    PassportNumber = passportNumber,
                    Email = email,
                    PhoneNumber = phoneNumber,
                    DateOfBirth = dateOfBirth
                };
                passenger = await passengerService.CreatePassengerAsync(passenger);
            }

            // –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
            var ticketClass = AnsiConsole.Prompt(
                new SelectionPrompt<TicketClass>()
                    .Title("[green]–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:[/]")
                    .AddChoices(Enum.GetValues<TicketClass>()));

            // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
            var priceMultiplier = ticketClass switch
            {
                TicketClass.Economy => 1.0m,
                TicketClass.Business => 2.0m,
                TicketClass.First => 3.0m,
                _ => 1.0m
            };

            var ticketPrice = selectedFlight.BasePrice * priceMultiplier;

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            var confirm = AnsiConsole.Confirm($"[green]–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ {ticketPrice:C}?[/]");
            if (!confirm)
            {
                AnsiConsole.Write(new Markup("[yellow]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            var ticket = new Ticket
            {
                FlightId = selectedFlight.Id,
                PassengerId = passenger.Id,
                Price = ticketPrice,
                Class = ticketClass,
                Status = TicketStatus.Active,
                BookingDate = DateTime.Now
            };

            var booking = await bookingService.CreateBookingAsync(new List<Ticket> { ticket });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
            await flightService.UpdateAvailableSeatsAsync(selectedFlight.Id, 1);

            AnsiConsole.Write(new Markup($"[bold green]‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ![/]"));
            AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.BookingNumber}[/]"));
            AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {ticket.TicketNumber}[/]"));
        }

        private async Task ManagePassengersAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();

            var passengers = await passengerService.GetAllPassengersAsync();

            if (!passengers.Any())
            {
                AnsiConsole.Write(new Markup("[red]–ü–∞—Å—Å–∞–∂–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                return;
            }

            var table = new Table();
            table.AddColumn("‚Ññ");
            table.AddColumn("–ò–º—è");
            table.AddColumn("–§–∞–º–∏–ª–∏—è");
            table.AddColumn("–ü–∞—Å–ø–æ—Ä—Ç");
            table.AddColumn("Email");
            table.AddColumn("–¢–µ–ª–µ—Ñ–æ–Ω");
            table.AddColumn("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è");

            for (int i = 0; i < passengers.Count; i++)
            {
                var passenger = passengers[i];
                table.AddRow(
                    (i + 1).ToString(),
                    passenger.FirstName,
                    passenger.LastName,
                    passenger.PassportNumber,
                    passenger.Email ?? "",
                    passenger.PhoneNumber ?? "",
                    passenger.DateOfBirth.ToString("dd.MM.yyyy")
                );
            }

            AnsiConsole.Write(table);
        }

        private async Task ShowBookingsAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

            var bookings = await bookingService.GetAllBookingsAsync();

            if (!bookings.Any())
            {
                AnsiConsole.Write(new Markup("[red]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/]"));
                return;
            }

            foreach (var booking in bookings)
            {
                var panel = new Panel($"[bold]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {booking.BookingNumber}\n" +
                                    $"[bold]–°—Ç–∞—Ç—É—Å:[/] {GetStatusText(booking.Status)}\n" +
                                    $"[bold]–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {booking.BookingDate:dd.MM.yyyy HH:mm}\n" +
                                    $"[bold]–û–±—â–∞—è —Å—É–º–º–∞:[/] {booking.TotalAmount:C}")
                {
                    Header = new PanelHeader($"[bold blue]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.Id}[/]")
                };

                AnsiConsole.Write(panel);

                var table = new Table();
                table.AddColumn("–ë–∏–ª–µ—Ç");
                table.AddColumn("–ü–∞—Å—Å–∞–∂–∏—Ä");
                table.AddColumn("–†–µ–π—Å");
                table.AddColumn("–ö–ª–∞—Å—Å");
                table.AddColumn("–¶–µ–Ω–∞");

                foreach (var ticket in booking.Tickets)
                {
                    table.AddRow(
                        ticket.TicketNumber,
                        $"{ticket.Passenger.FirstName} {ticket.Passenger.LastName}",
                        $"{ticket.Flight.FlightNumber} ({ticket.Flight.DepartureCity} ‚Üí {ticket.Flight.ArrivalCity})",
                        ticket.Class.ToString(),
                        $"{ticket.Price:C}"
                    );
                }

                AnsiConsole.Write(table);
                AnsiConsole.WriteLine();
            }
        }

        private async Task CancelBookingAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

            var bookingNumber = AnsiConsole.Ask<string>("[green]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/]");

            var booking = await bookingService.GetBookingByNumberAsync(bookingNumber);
            if (booking == null)
            {
                AnsiConsole.Write(new Markup("[red]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.[/]"));
                return;
            }

            if (booking.Status == BookingStatus.Cancelled)
            {
                AnsiConsole.Write(new Markup("[red]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/]"));
                return;
            }

            var confirm = AnsiConsole.Confirm($"[red]–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {bookingNumber}?[/]");
            if (!confirm)
            {
                AnsiConsole.Write(new Markup("[yellow]–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/]"));
                return;
            }

            var success = await bookingService.CancelBookingAsync(booking.Id);
            if (success)
            {
                AnsiConsole.Write(new Markup("[bold green]‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ![/]"));
            }
            else
            {
                AnsiConsole.Write(new Markup("[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.[/]"));
            }
        }

        private async Task ShowStatisticsAsync()
        {
            AnsiConsole.Write(new Markup("[bold blue]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞[/]"));
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<AirlineDbContext>();

            var totalFlights = await context.Flights.CountAsync();
            var totalPassengers = await context.Passengers.CountAsync();
            var totalBookings = await context.Bookings.CountAsync();
            var totalRevenue = await context.Bookings
                .Where(b => b.Status != BookingStatus.Cancelled)
                .SumAsync(b => b.TotalAmount);

            var stats = new Table();
            stats.AddColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
            stats.AddColumn("–ó–Ω–∞—á–µ–Ω–∏–µ");

            stats.AddRow("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤", totalFlights.ToString());
            stats.AddRow("–í—Å–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", totalPassengers.ToString());
            stats.AddRow("–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", totalBookings.ToString());
            stats.AddRow("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", $"{totalRevenue:C}");

            AnsiConsole.Write(stats);
        }

        private string GetStatusText(BookingStatus status)
        {
            return status switch
            {
                BookingStatus.Confirmed => "[green]–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ[/]",
                BookingStatus.Cancelled => "[red]–û—Ç–º–µ–Ω–µ–Ω–æ[/]",
                BookingStatus.Completed => "[blue]–ó–∞–≤–µ—Ä—à–µ–Ω–æ[/]",
                _ => status.ToString()
            };
        }
    }
}
