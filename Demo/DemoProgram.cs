using Spectre.Console;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using AirlineTicketSystem.Data;
using AirlineTicketSystem.Services;
using AirlineTicketSystem.Models;
using System.Globalization;

namespace AirlineTicketSystem.Demo
{
    public class DemoProgram
    {
        public static async Task Main(string[] args)
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö
            var culture = new CultureInfo("ru-RU");
            CultureInfo.CurrentCulture = culture;
            CultureInfo.CurrentUICulture = culture;
            Thread.CurrentThread.CurrentCulture = culture;
            Thread.CurrentThread.CurrentUICulture = culture;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            var host = Host.CreateDefaultBuilder(args)
                .ConfigureLogging(logging =>
                {
                    logging.ClearProviders(); // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    logging.SetMinimumLevel(LogLevel.Warning); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
                })
                .ConfigureServices((context, services) =>
                {
                    services.AddDbContext<AirlineDbContext>(options =>
                        options.UseSqlite("Data Source=airline.db")
                               .EnableSensitiveDataLogging(false)
                               .LogTo(Console.WriteLine, LogLevel.Warning)); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    
                    services.AddScoped<IAirlineService, AirlineService>();
                    services.AddScoped<IFlightService, FlightService>();
                    services.AddScoped<IPassengerService, PassengerService>();
                    services.AddScoped<IBookingService, BookingService>();
                })
                .Build();

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            using (var scope = host.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AirlineDbContext>();
                await context.Database.EnsureCreatedAsync();
                await SeedDataAsync(context);
            }

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            var demo = new AirlineTicketDemo(host.Services);
            await demo.RunDemoAsync();
        }

        private static async Task SeedDataAsync(AirlineDbContext context)
        {
            if (await context.Airlines.AnyAsync())
                return;

            var airlines = new List<Airline>
            {
                new() { Name = "–ê—ç—Ä–æ—Ñ–ª–æ—Ç", Code = "SU", Description = "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è" },
                new() { Name = "S7 Airlines", Code = "S7", Description = "–°–∏–±–∏—Ä—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏" },
                new() { Name = "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏", Code = "U6", Description = "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏" },
                new() { Name = "–ü–æ–±–µ–¥–∞", Code = "DP", Description = "–ë—é–¥–∂–µ—Ç–Ω–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è" }
            };

            context.Airlines.AddRange(airlines);
            await context.SaveChangesAsync();

            var flights = new List<Flight>
            {
                new()
                {
                    FlightNumber = "SU123",
                    DepartureCity = "–ú–æ—Å–∫–≤–∞",
                    ArrivalCity = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    DepartureTime = DateTime.Now.AddDays(1).AddHours(10),
                    ArrivalTime = DateTime.Now.AddDays(1).AddHours(12),
                    TotalSeats = 150,
                    AvailableSeats = 150,
                    BasePrice = 5000,
                    AirlineId = 1
                },
                new()
                {
                    FlightNumber = "S7456",
                    DepartureCity = "–ú–æ—Å–∫–≤–∞",
                    ArrivalCity = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                    DepartureTime = DateTime.Now.AddDays(2).AddHours(14),
                    ArrivalTime = DateTime.Now.AddDays(2).AddHours(18),
                    TotalSeats = 120,
                    AvailableSeats = 120,
                    BasePrice = 8000,
                    AirlineId = 2
                },
                new()
                {
                    FlightNumber = "U6789",
                    DepartureCity = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    ArrivalCity = "–°–æ—á–∏",
                    DepartureTime = DateTime.Now.AddDays(3).AddHours(8),
                    ArrivalTime = DateTime.Now.AddDays(3).AddHours(12),
                    TotalSeats = 180,
                    AvailableSeats = 180,
                    BasePrice = 12000,
                    AirlineId = 3
                }
            };

            context.Flights.AddRange(flights);
            await context.SaveChangesAsync();
        }
    }

    public class AirlineTicketDemo
    {
        private readonly IServiceProvider _serviceProvider;

        public AirlineTicketDemo(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public async Task RunDemoAsync()
        {
            AnsiConsole.Write(new FigletText("–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã").Color(Color.Blue));
            AnsiConsole.Write(new Markup("[bold green]–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ - –î–ï–ú–û[/]").Centered());
            AnsiConsole.WriteLine();

            using var scope = _serviceProvider.CreateScope();
            var flightService = scope.ServiceProvider.GetRequiredService<IFlightService>();
            var passengerService = scope.ServiceProvider.GetRequiredService<IPassengerService>();
            var bookingService = scope.ServiceProvider.GetRequiredService<IBookingService>();

            // 1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã
            AnsiConsole.Write(new Markup("[bold blue]‚úàÔ∏è –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:[/]"));
            AnsiConsole.WriteLine();

            var flights = await flightService.GetAllFlightsAsync();
            var table = new Table();
            table.AddColumn("‚Ññ");
            table.AddColumn("–†–µ–π—Å");
            table.AddColumn("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
            table.AddColumn("–û—Ç–∫—É–¥–∞");
            table.AddColumn("–ö—É–¥–∞");
            table.AddColumn("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            table.AddColumn("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è");
            table.AddColumn("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
            table.AddColumn("–¶–µ–Ω–∞");

            for (int i = 0; i < flights.Count; i++)
            {
                var flight = flights[i];
                table.AddRow(
                    (i + 1).ToString(),
                    flight.FlightNumber,
                    flight.Airline.Name,
                    flight.DepartureCity,
                    flight.ArrivalCity,
                    flight.DepartureTime.ToString("dd.MM.yyyy HH:mm"),
                    flight.ArrivalTime.ToString("dd.MM.yyyy HH:mm"),
                    flight.AvailableSeats.ToString(),
                    $"{flight.BasePrice:C}"
                );
            }

            AnsiConsole.Write(table);
            AnsiConsole.WriteLine();

            // 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
            AnsiConsole.Write(new Markup("[bold blue]üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥:[/]"));
            AnsiConsole.WriteLine();

            var searchResults = await flightService.SearchFlightsAsync("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", null);
            var searchTable = new Table();
            searchTable.AddColumn("–†–µ–π—Å");
            searchTable.AddColumn("–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è");
            searchTable.AddColumn("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            searchTable.AddColumn("–¶–µ–Ω–∞");

            foreach (var flight in searchResults)
            {
                searchTable.AddRow(
                    flight.FlightNumber,
                    flight.Airline.Name,
                    flight.DepartureTime.ToString("dd.MM.yyyy HH:mm"),
                    $"{flight.BasePrice:C}"
                );
            }

            AnsiConsole.Write(searchTable);
            AnsiConsole.WriteLine();

            // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            AnsiConsole.Write(new Markup("[bold blue]üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:[/]"));
            AnsiConsole.WriteLine();

            var passportNumber = "1234567890";
            var passenger = await passengerService.GetPassengerByPassportAsync(passportNumber);
            
            if (passenger == null)
            {
                passenger = new Passenger
                {
                    FirstName = "–ò–≤–∞–Ω",
                    LastName = "–ü–µ—Ç—Ä–æ–≤",
                    PassportNumber = passportNumber,
                    Email = "ivan.petrov@example.com",
                    PhoneNumber = "+7-999-123-45-67",
                    DateOfBirth = new DateTime(1990, 5, 15)
                };

                passenger = await passengerService.CreatePassengerAsync(passenger);
                AnsiConsole.Write(new Markup($"[green]‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä —Å–æ–∑–¥–∞–Ω: {passenger.FirstName} {passenger.LastName} (ID: {passenger.Id})[/]"));
            }
            else
            {
                AnsiConsole.Write(new Markup($"[green]‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä –Ω–∞–π–¥–µ–Ω: {passenger.FirstName} {passenger.LastName} (ID: {passenger.Id})[/]"));
            }
            AnsiConsole.WriteLine();

            // 4. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞
            AnsiConsole.Write(new Markup("[bold blue]üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞:[/]"));
            AnsiConsole.WriteLine();

            var selectedFlight = flights.First();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–µ–π—Å
            using var contextScope = _serviceProvider.CreateScope();
            var context = contextScope.ServiceProvider.GetRequiredService<AirlineDbContext>();
            var existingTicket = await context.Tickets
                .FirstOrDefaultAsync(t => t.PassengerId == passenger.Id && t.FlightId == selectedFlight.Id);

            if (existingTicket == null)
            {
                var ticket = new Ticket
                {
                    FlightId = selectedFlight.Id,
                    PassengerId = passenger.Id,
                    Price = selectedFlight.BasePrice * 2.0m, // Business –∫–ª–∞—Å—Å
                    Class = TicketClass.Business,
                    Status = TicketStatus.Active,
                    BookingDate = DateTime.Now
                };

                var booking = await bookingService.CreateBookingAsync(new List<Ticket> { ticket });
                await flightService.UpdateAvailableSeatsAsync(selectedFlight.Id, 1);

                AnsiConsole.Write(new Markup($"[green]‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ![/]"));
                AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.BookingNumber}[/]"));
                AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {ticket.TicketNumber}[/]"));
                AnsiConsole.Write(new Markup($"[green]–ö–ª–∞—Å—Å: {ticket.Class}[/]"));
                AnsiConsole.Write(new Markup($"[green]–¶–µ–Ω–∞: {ticket.Price:C}[/]"));
            }
            else
            {
                AnsiConsole.Write(new Markup($"[green]‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç![/]"));
                AnsiConsole.Write(new Markup($"[green]–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {existingTicket.TicketNumber}[/]"));
                AnsiConsole.Write(new Markup($"[green]–ö–ª–∞—Å—Å: {existingTicket.Class}[/]"));
                AnsiConsole.Write(new Markup($"[green]–¶–µ–Ω–∞: {existingTicket.Price:C}[/]"));
            }
            AnsiConsole.WriteLine();

            // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            AnsiConsole.Write(new Markup("[bold blue]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:[/]"));
            AnsiConsole.WriteLine();

            var totalFlights = await context.Flights.CountAsync();
            var totalPassengers = await context.Passengers.CountAsync();
            var totalBookings = await context.Bookings.CountAsync();
            var totalRevenue = await context.Bookings
                .Where(b => b.Status != BookingStatus.Cancelled)
                .SumAsync(b => b.TotalAmount);

            var statsTable = new Table();
            statsTable.AddColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
            statsTable.AddColumn("–ó–Ω–∞—á–µ–Ω–∏–µ");

            statsTable.AddRow("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤", totalFlights.ToString());
            statsTable.AddRow("–í—Å–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", totalPassengers.ToString());
            statsTable.AddRow("–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", totalBookings.ToString());
            statsTable.AddRow("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", $"{totalRevenue:C}");

            AnsiConsole.Write(statsTable);
            AnsiConsole.WriteLine();

            // 6. –ü–æ–∫–∞–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            AnsiConsole.Write(new Markup("[bold blue]üìã –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/]"));
            AnsiConsole.WriteLine();

            var bookings = await bookingService.GetAllBookingsAsync();
            foreach (var b in bookings)
            {
                var panel = new Panel($"[bold]–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {b.BookingNumber}\n" +
                                    $"[bold]–°—Ç–∞—Ç—É—Å:[/] {GetStatusText(b.Status)}\n" +
                                    $"[bold]–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {b.BookingDate:dd.MM.yyyy HH:mm}\n" +
                                    $"[bold]–û–±—â–∞—è —Å—É–º–º–∞:[/] {b.TotalAmount:C}")
                {
                    Header = new PanelHeader($"[bold blue]–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{b.Id}[/]")
                };

                AnsiConsole.Write(panel);
            }

            AnsiConsole.WriteLine();
            AnsiConsole.Write(new Markup("[bold green]üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ![/]"));
        }

        private string GetStatusText(BookingStatus status)
        {
            return status switch
            {
                BookingStatus.Confirmed => "[green]–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ[/]",
                BookingStatus.Cancelled => "[red]–û—Ç–º–µ–Ω–µ–Ω–æ[/]",
                BookingStatus.Completed => "[blue]–ó–∞–≤–µ—Ä—à–µ–Ω–æ[/]",
                _ => status.ToString()
            };
        }
    }
}
